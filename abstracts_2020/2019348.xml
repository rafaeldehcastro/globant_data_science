<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle><![CDATA[FMitF: Track II: Strengthening the integration of the CVC4 SMT solver in the Coq proof assistant]]></AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>07/01/2020</AwardEffectiveDate>
<AwardExpirationDate>07/31/2022</AwardExpirationDate>
<AwardTotalIntnAmount>100000.00</AwardTotalIntnAmount>
<AwardAmount>100000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Pavithra Prabhakar</SignBlockName>
<PO_EMAI>pprabhak@nsf.gov</PO_EMAI>
<PO_PHON>7032922585</PO_PHON>
</ProgramOfficer>
<AbstractNarration><![CDATA[Proof assistants are interactive software tools that help computer scientists and mathematicians prove mathematical theorems. In particular, they are increasingly used to help develop and formalize the theoretical foundations of certain areas of computer science, such as programming languages, or formally state and prove the correctness of specific software and hardware. This project aims to improve the level of automation in the popular Coq proof assistant. The project's novelty consists in fully integrating in Coq a powerful automated prover, CVC4, to prove automatically certain proof subgoals, expressed as logical formulas, that may arise during a proof session in Coq. Increasing the level of automation in proof assistants will positively impact Coq users throughout academia and industry by making it easier and less tedious to develop proofs in Coq. Demonstrating the advantages of this integration with real-world problems through a planned collaboration with an industrial partner will have a significant impact on verified construction of systems software. The reduction of time and effort to develop fully verified software will facilitate the creation of more robust, reliable and secure software systems.&lt;br/&gt;&lt;br/&gt;The research team builds on a previous integration of CVC4 in Coq achieved through the SMTCoq Coq plugin developed with external collaborators. The integration is trustworthy because, once it proves a subgoal, CVC4 generates a formal proof that SMTCoq then replays internally to prove the subgoal within Coq. This project significantly extends the class of subgoals that can be dispatched to CVC4 by adding support for user-defined functions and quantifiers. It also extends CVC4 and SMTCoq with the ability to help the Coq user when a subgoal does not hold, by suggesting additional assumptions that would make the subgoal provable. Since the sort of automation enhancements achieved with this project could be adapted to other proof assistants, this project also contributes in general to bringing closer together the worlds of interactive and automated theorem proving.&lt;br/&gt;&lt;br/&gt;This award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.]]></AbstractNarration>
<MinAmdLetterDate>06/16/2020</MinAmdLetterDate>
<MaxAmdLetterDate>06/16/2020</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>1</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>2019348</AwardID>
<Investigator>
<FirstName>Cesare</FirstName>
<LastName>Tinelli</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Cesare Tinelli</PI_FULL_NAME>
<EmailAddress><![CDATA[cesare-tinelli@uiowa.edu]]></EmailAddress>
<NSF_ID>000304361</NSF_ID>
<StartDate>06/16/2020</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Investigator>
<FirstName>Andrew</FirstName>
<LastName>Reynolds</LastName>
<PI_MID_INIT>J</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Andrew J Reynolds</PI_FULL_NAME>
<EmailAddress><![CDATA[andrew.j.reynolds@gmail.com]]></EmailAddress>
<NSF_ID>000727964</NSF_ID>
<StartDate>06/16/2020</StartDate>
<EndDate/>
<RoleCode>Co-Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Iowa</Name>
<CityName>IOWA CITY</CityName>
<ZipCode>522421316</ZipCode>
<PhoneNumber>3193352123</PhoneNumber>
<StreetAddress>105 JESSUP HALL</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Iowa</StateName>
<StateCode>IA</StateCode>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>IA01</CONGRESS_DISTRICT_ORG>
<ORG_UEI_NUM>Z1H9VJS8NG16</ORG_UEI_NUM>
<ORG_LGL_BUS_NAME>THE UNIVERSITY OF IOWA</ORG_LGL_BUS_NAME>
<ORG_PRNT_UEI_NUM/>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Iowa]]></Name>
<CityName>IOWA CITY</CityName>
<StateCode>IA</StateCode>
<ZipCode>522421320</ZipCode>
<StreetAddress><![CDATA[2 GILMORE HALL]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Iowa</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>01</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>IA01</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>094Y</Code>
<Text>FMitF: Formal Methods in the F</Text>
</ProgramElement>
<ProgramReference>
<Code>071Z</Code>
<Text>FMitF-Formal Methods in the Field</Text>
</ProgramReference>
<ProgramReference>
<Code>8206</Code>
<Text>Formal Methods and Verification</Text>
</ProgramReference>
<Appropriation>
<Code>0120</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Fund>
<Code>01002021DB</Code>
<Name><![CDATA[NSF RESEARCH & RELATED ACTIVIT]]></Name>
<FUND_SYMB_ID>040100</FUND_SYMB_ID>
</Fund>
<FUND_OBLG>2020~100000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p><span>Proof assistants are interactive software tools that help computer scientists and mathematicians prove mathematical theorems. They assist the human user by checking the correctness of the proof steps specified by the user, or proving some of those steps automatically.&nbsp;</span>In computer science, proof assistants are becoming increasingly indispensable aids to develop and formalize the theoretical foundations of certain areas, such as programming languages, or to formally state and prove the correctness of specific safety- or mission-critical software and hardware.</p> <p>The main outcome of this project has been to improve the level of automation in the popular proof assistant Coq. Its novelty consists in fully integrating in Coq a powerful automated prover, cvc5, to prove certain proof subgoals that may arise during a proof session in Coq.&nbsp;cvc5 proves these goals automatically if they hold. If they do not hold, it can suggest additional restrictions under which they would hold. Thanks to this integration, these capabilities are provided to Coq users directly in Coq. In other words, users interact with the proof assistant as usual but have to prove fewer intermediate steps and receive better feedback from Coq on how to refine some theorems that do not hold as stated. Increasing the level of automation and the quality of feedback in Coq&nbsp;benefits its users in academia and industry by making the development of proofs in Coq easier and less tedious. This reduces the time and effort required to develop, for instance, fully verified software. That benefits society at large since it facilitates the creation of more robust, reliable and secure software systems.</p> <p><span>The research team built this work on a previous integration in Coq of a predecessor of cvc5, achieved through the SMTCoq software library developed with external collaborators. The integration is trustworthy because, once it proves a subgoal, cvc5 generates a formal proof that SMTCoq can then reconstructs internally within Coq, to make sure that the proof is sound. This project significantly extends the class of subgoals that can be dispatched to cvc5 by adding support for a more expressive language of goals. Thanks to some new reasoning capabilities in cvc5, it also provides SMTCoq with the ability to help the Coq user when a subgoal does not hold, by suggesting additional assumptions that would make the subgoal provable. </span></p> <p><span>Since the sort of automation enhancements achieved with this project can be adapted to other proof assistants, another outcome of the project has been to spur the integration of cvc5 in the major proof assitants Isabelle/HOL and Lean, with similar goals and benefits. This is contributing in general to bringing closer together the worlds of interactive and automated theorem proving, for the general benefit of proof assistant users.</span></p><br> <p>            Last Modified: 02/13/2023<br>      Modified by: Cesare&nbsp;Tinelli</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Proof assistants are interactive software tools that help computer scientists and mathematicians prove mathematical theorems. They assist the human user by checking the correctness of the proof steps specified by the user, or proving some of those steps automatically. In computer science, proof assistants are becoming increasingly indispensable aids to develop and formalize the theoretical foundations of certain areas, such as programming languages, or to formally state and prove the correctness of specific safety- or mission-critical software and hardware.  The main outcome of this project has been to improve the level of automation in the popular proof assistant Coq. Its novelty consists in fully integrating in Coq a powerful automated prover, cvc5, to prove certain proof subgoals that may arise during a proof session in Coq. cvc5 proves these goals automatically if they hold. If they do not hold, it can suggest additional restrictions under which they would hold. Thanks to this integration, these capabilities are provided to Coq users directly in Coq. In other words, users interact with the proof assistant as usual but have to prove fewer intermediate steps and receive better feedback from Coq on how to refine some theorems that do not hold as stated. Increasing the level of automation and the quality of feedback in Coq benefits its users in academia and industry by making the development of proofs in Coq easier and less tedious. This reduces the time and effort required to develop, for instance, fully verified software. That benefits society at large since it facilitates the creation of more robust, reliable and secure software systems.  The research team built this work on a previous integration in Coq of a predecessor of cvc5, achieved through the SMTCoq software library developed with external collaborators. The integration is trustworthy because, once it proves a subgoal, cvc5 generates a formal proof that SMTCoq can then reconstructs internally within Coq, to make sure that the proof is sound. This project significantly extends the class of subgoals that can be dispatched to cvc5 by adding support for a more expressive language of goals. Thanks to some new reasoning capabilities in cvc5, it also provides SMTCoq with the ability to help the Coq user when a subgoal does not hold, by suggesting additional assumptions that would make the subgoal provable.   Since the sort of automation enhancements achieved with this project can be adapted to other proof assistants, another outcome of the project has been to spur the integration of cvc5 in the major proof assitants Isabelle/HOL and Lean, with similar goals and benefits. This is contributing in general to bringing closer together the worlds of interactive and automated theorem proving, for the general benefit of proof assistant users.       Last Modified: 02/13/2023       Submitted by: Cesare Tinelli]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
