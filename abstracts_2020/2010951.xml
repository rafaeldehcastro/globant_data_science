<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle><![CDATA[SHF: Small: Mechanical Verification of QBF Results]]></AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>11/02/2019</AwardEffectiveDate>
<AwardExpirationDate>07/31/2021</AwardExpirationDate>
<AwardTotalIntnAmount>196608.00</AwardTotalIntnAmount>
<AwardAmount>196608</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Pavithra Prabhakar</SignBlockName>
<PO_EMAI>pprabhak@nsf.gov</PO_EMAI>
<PO_PHON>7032922585</PO_PHON>
</ProgramOfficer>
<AbstractNarration><![CDATA[Many important industrial applications, such as verification and synthesis problems, can be efficiently solved by satisfiability (SAT) solvers.  However, this approach involves translating the original problem into SAT that typically results in generating dozens to thousands of nearly identical copies of subproblems.  The quantified Boolean formula (QBF) formalism provides a convenient framework to compactly translate many of these interesting problems. For example, software verification and hardware synthesis problems can be translated into QBF, while avoiding generating these nearly identical copies.  Hence, QBF facilities a compact representation of crucial problems in computer science.&lt;br/&gt;&lt;br/&gt;The expressiveness of QBF comes at a price: it is hard validate the results produced by these solvers.  The existing approaches for addressing this problem all have disadvantages.  Prevalent approaches involve costly validation algorithms and limit the used techniques.  A recent technological advancement, known as clausal proofs, takes care of most problems.  However, efficiently checking clausal proofs is complicated, thus trusting the results of one complex program (a QBF solver) depends on the correctness of another complex program (the checker).  To boost confidence in the results of QBF solvers, a mechanically-verified checker is required.  This research develops a uniform, complete, and trustworthy framework for QBF solving which is urgently needed for the scientific and industrial application of QBF solvers.]]></AbstractNarration>
<MinAmdLetterDate>01/08/2020</MinAmdLetterDate>
<MaxAmdLetterDate>01/08/2020</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>0</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>2010951</AwardID>
<Investigator>
<FirstName>Marienus</FirstName>
<LastName>Heule</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Marienus Heule</PI_FULL_NAME>
<EmailAddress><![CDATA[marijn@cmu.edu]]></EmailAddress>
<NSF_ID>000689986</NSF_ID>
<StartDate>01/08/2020</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Carnegie-Mellon University</Name>
<CityName>PITTSBURGH</CityName>
<ZipCode>152133815</ZipCode>
<PhoneNumber>4122688746</PhoneNumber>
<StreetAddress>5000 FORBES AVE</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<StateCode>PA</StateCode>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>PA18</CONGRESS_DISTRICT_ORG>
<ORG_UEI_NUM>U3NKNFLNQ613</ORG_UEI_NUM>
<ORG_LGL_BUS_NAME>CARNEGIE MELLON UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_UEI_NUM>U3NKNFLNQ613</ORG_PRNT_UEI_NUM>
</Institution>
<Performance_Institution>
<Name><![CDATA[Carnegie-Mellon University]]></Name>
<CityName>Pittsburgh</CityName>
<StateCode>PA</StateCode>
<ZipCode>152133815</ZipCode>
<StreetAddress><![CDATA[5000 Forbes Ave WQED Bldg]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Pennsylvania</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>18</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>PA18</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>8206</Code>
<Text>Formal Methods and Verification</Text>
</ProgramReference>
<Appropriation>
<Code>0116</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Fund>
<Code>01001617DB</Code>
<Name><![CDATA[NSF RESEARCH & RELATED ACTIVIT]]></Name>
<FUND_SYMB_ID>040100</FUND_SYMB_ID>
</Fund>
<FUND_OBLG>2016~196608</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><div class="page" title="Page 2"> <div class="layoutArea"> <div class="column"> <p>Automated reasoning tools have become very powerful to solve a broad range of problems. However, these tools also became more and more complicated. To have confidence in their correctness, we need a method to validate their results. This project focused on a validation method for tools that solve&nbsp;quantified Boolean formulas (QBF). QBF&nbsp;provides a convenient framework to compactly encode many interesting problems, including&nbsp;model checking and hardware synthesis. The expressiveness of QBF comes at a price: it is hard validate results by QBF solvers. The existing approaches for addressing this problem all have disadvantages. Prevalent approaches involve using only a subset of state-of-the-art solver techniques and validation algorithms require exponential running time.&nbsp;</p> </div> </div> </div> <p>Key outcomes of the project are all related to QRAT, a recent proof system to validate QBF results. First, we showed how to produce QRAT proofs even when combining different preprocessing and solving techniques. Second, we demonstrated how to extract useful information out of these proofs, in particular Skolem functions. This information is crucial for various applications. Third, we developed new preprocessing techniques for QBF that were inspired by the QRAT proof system. Forth, we studied to relationship between QRAT and other strong proof systems for QBFs, resulting in some interesting simulation results. Finally, we developed a QBF solver that is radically different compared to existing ones. This solver is able to solve some problems that are too hard for alternative approaches. Moreover, all reasoning in this solver is logged as QRAT proofs. By checking these proofs, we can have full confidence in the correctness of the results.&nbsp;</p><br> <p>            Last Modified: 02/06/2022<br>      Modified by: Marienus&nbsp;Heule</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[    Automated reasoning tools have become very powerful to solve a broad range of problems. However, these tools also became more and more complicated. To have confidence in their correctness, we need a method to validate their results. This project focused on a validation method for tools that solve quantified Boolean formulas (QBF). QBF provides a convenient framework to compactly encode many interesting problems, including model checking and hardware synthesis. The expressiveness of QBF comes at a price: it is hard validate results by QBF solvers. The existing approaches for addressing this problem all have disadvantages. Prevalent approaches involve using only a subset of state-of-the-art solver techniques and validation algorithms require exponential running time.      Key outcomes of the project are all related to QRAT, a recent proof system to validate QBF results. First, we showed how to produce QRAT proofs even when combining different preprocessing and solving techniques. Second, we demonstrated how to extract useful information out of these proofs, in particular Skolem functions. This information is crucial for various applications. Third, we developed new preprocessing techniques for QBF that were inspired by the QRAT proof system. Forth, we studied to relationship between QRAT and other strong proof systems for QBFs, resulting in some interesting simulation results. Finally, we developed a QBF solver that is radically different compared to existing ones. This solver is able to solve some problems that are too hard for alternative approaches. Moreover, all reasoning in this solver is logged as QRAT proofs. By checking these proofs, we can have full confidence in the correctness of the results.        Last Modified: 02/06/2022       Submitted by: Marienus Heule]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
