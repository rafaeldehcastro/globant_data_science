<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle><![CDATA[FMitF: Track II: Usability, Robustness, and Performance Improvements for CIVL]]></AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2020</AwardEffectiveDate>
<AwardExpirationDate>03/31/2023</AwardExpirationDate>
<AwardTotalIntnAmount>100000.00</AwardTotalIntnAmount>
<AwardAmount>100000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Pavithra Prabhakar</SignBlockName>
<PO_EMAI>pprabhak@nsf.gov</PO_EMAI>
<PO_PHON>7032922585</PO_PHON>
</ProgramOfficer>
<AbstractNarration><![CDATA[Scientific and high-performance computing software deals with issues of fundamental importance to science, engineering, and society more generally.  Examples include applications to predict earthquake damage, model the global climate, perform atomic-level simulations of chemical and biological systems, and to investigate the electronic structure of matter.  These programs inform both profound scientific conclusions and decisions of the utmost importance to society.  For these reasons, it is imperative to develop effective methods for debugging and verifying scientific programs.  This project enhances the usability, performance, and robustness of the Concurrent Intermediate Verification Language (CIVL), a verification tool for scientific programs based on symbolic execution and model checking.  The project's novelties are (1) an expanded ability to verify programs that use a variety of parallel-programming Application Programming Interfaces (APIs), and (2) the capability to verify that two versions of a program are equivalent.  The project's impacts are seen in the improved productivity of the software developers using CIVL to help debug their code, and in the increased confidence in the correctness of the resulting software.&lt;br/&gt;&lt;br/&gt;The project improves CIVL along three lines: usability, robustness and language coverage, and performance.  Usability improvements include improved error reporting and the ability to control precisely what CIVL checks.  Language coverage is improved by correcting limitations in CIVL's array model, and increasing coverage of the C standard library.  Performance is being improved by parallelizing CIVL's model-checking engine and streamlining its expression-evaluation algorithm.  These improvements are guided by ongoing interaction with scientific-software development teams who are using CIVL and providing feedback.&lt;br/&gt;&lt;br/&gt;This award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.]]></AbstractNarration>
<MinAmdLetterDate>06/16/2020</MinAmdLetterDate>
<MaxAmdLetterDate>06/16/2020</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>1</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>2019309</AwardID>
<Investigator>
<FirstName>Stephen</FirstName>
<LastName>Siegel</LastName>
<PI_MID_INIT>F</PI_MID_INIT>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Stephen F Siegel</PI_FULL_NAME>
<EmailAddress><![CDATA[siegel@udel.edu]]></EmailAddress>
<NSF_ID>000264334</NSF_ID>
<StartDate>06/16/2020</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Delaware</Name>
<CityName>NEWARK</CityName>
<ZipCode>197160099</ZipCode>
<PhoneNumber>3028312136</PhoneNumber>
<StreetAddress>220 HULLIHEN HALL</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>Delaware</StateName>
<StateCode>DE</StateCode>
<CONGRESSDISTRICT>00</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>DE00</CONGRESS_DISTRICT_ORG>
<ORG_UEI_NUM>T72NHKM259N3</ORG_UEI_NUM>
<ORG_LGL_BUS_NAME>UNIVERSITY OF DELAWARE</ORG_LGL_BUS_NAME>
<ORG_PRNT_UEI_NUM/>
</Institution>
<Performance_Institution>
<Name><![CDATA[University of Delaware]]></Name>
<CityName>Newark</CityName>
<StateCode>DE</StateCode>
<ZipCode>197162553</ZipCode>
<StreetAddress><![CDATA[210 Hullihen Hall]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>Delaware</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>00</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>DE00</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>094Y</Code>
<Text>FMitF: Formal Methods in the F</Text>
</ProgramElement>
<ProgramReference>
<Code>071Z</Code>
<Text>FMitF-Formal Methods in the Field</Text>
</ProgramReference>
<ProgramReference>
<Code>8206</Code>
<Text>Formal Methods and Verification</Text>
</ProgramReference>
<ProgramReference>
<Code>9150</Code>
<Text>EXP PROG TO STIM COMP RES</Text>
</ProgramReference>
<Appropriation>
<Code>0120</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Fund>
<Code>01002021DB</Code>
<Name><![CDATA[NSF RESEARCH & RELATED ACTIVIT]]></Name>
<FUND_SYMB_ID>040100</FUND_SYMB_ID>
</Fund>
<FUND_OBLG>2020~100000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>This project led to numerous improvements to the CIVL Model Checker, with the aim of making it a more useful verification tool for developers of scientific software.<br />CIVL is a software verification tool for C programs, especially parallel programs and programs used for scientific computation. &nbsp; A developer of such programs can use CIVL to check for the presence of various program defects, such as buffer overflows, assertion violations, illegal pointer operations, deadlocks, and data races. &nbsp; CIVL may also be used to verify that two versions of a program are "functionally equivalent." &nbsp; The programs may use C in combination with message-passing (MPI) and/or multithreading APIs (OpenMP or Pthreads).<br />Improvements were made for usability, robustness, and performance. &nbsp; A new language manual and related reference material were authored and published on the web at http://civl.dev. &nbsp;Tool output has been made more comprehensible and precise. &nbsp;A number of defects in the CIVL code base were discovered and corrected. &nbsp;A new "partial order reduction" scheme has been implemented to improve performance (speed) of the model checking engine. &nbsp;Many internal improvements were carried out, such as consolidating four separate open-source projects into one, and updating the code base to use an up-to-date version of Java.<br />The CIVL Model Checker is now being applied to a number of scientific computing applications, including those that perform sparse linear algebra operations. &nbsp;CIVL has also performed well in the international verification competition VerifyThis, winning second place in 2022.</p><br> <p>            Last Modified: 07/25/2023<br>      Modified by: Stephen&nbsp;F&nbsp;Siegel</p> </div> <div class="porSideCol"> <div class="each-gallery"> <div class="galContent" id="gallery0"> <div class="photoCount" id="photoCount0">          Images (<span id="selectedPhoto0">1</span> of <span class="totalNumber"></span>)           </div> <div class="galControls" id="controls0"></div> <div class="galSlideshow" id="slideshow0"></div> <div class="galEmbox" id="embox"> <div class="image-title"></div> </div> </div> <div class="galNavigation" id="navigation0"> <ul class="thumbs" id="thumbs0"> <li> <a href="/por/images/Reports/POR/2023/2019309/2019309_10677641_1690315604664_CivlManual--rgov-214x142.jpg" original="/por/images/Reports/POR/2023/2019309/2019309_10677641_1690315604664_CivlManual--rgov-800width.jpg" title="CIVL Manual"><img src="/por/images/Reports/POR/2023/2019309/2019309_10677641_1690315604664_CivlManual--rgov-66x44.jpg" alt="CIVL Manual"></a> <div class="imageCaptionContainer"> <div class="imageCaption">CIVL Manual: language reference.  http://civl.dev</div> <div class="imageCredit">Stephen F. Siegel</div> <div class="imagePermisssions">Creative Commons</div> <div class="imageSubmitted">Stephen&nbsp;F&nbsp;Siegel</div> <div class="imageTitle">CIVL Manual</div> </div> </li> <li> <a href="/por/images/Reports/POR/2023/2019309/2019309_10677641_1690315713415_scopeCodeExample--rgov-214x142.jpg" original="/por/images/Reports/POR/2023/2019309/2019309_10677641_1690315713415_scopeCodeExample--rgov-800width.jpg" title="CIVL-C Program and Scopes"><img src="/por/images/Reports/POR/2023/2019309/2019309_10677641_1690315713415_scopeCodeExample--rgov-66x44.jpg" alt="CIVL-C Program and Scopes"></a> <div class="imageCaptionContainer"> <div class="imageCaption">A CIVL-C program skeleton with scopes numbered.  Form CIVL Manual, http://civl.dev.</div> <div class="imageCredit">Stephen F. Siegel</div> <div class="imagePermisssions">Creative Commons</div> <div class="imageSubmitted">Stephen&nbsp;F&nbsp;Siegel</div> <div class="imageTitle">CIVL-C Program and Scopes</div> </div> </li> </ul> </div> </div> </div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ This project led to numerous improvements to the CIVL Model Checker, with the aim of making it a more useful verification tool for developers of scientific software. CIVL is a software verification tool for C programs, especially parallel programs and programs used for scientific computation.   A developer of such programs can use CIVL to check for the presence of various program defects, such as buffer overflows, assertion violations, illegal pointer operations, deadlocks, and data races.   CIVL may also be used to verify that two versions of a program are "functionally equivalent."   The programs may use C in combination with message-passing (MPI) and/or multithreading APIs (OpenMP or Pthreads). Improvements were made for usability, robustness, and performance.   A new language manual and related reference material were authored and published on the web at http://civl.dev.  Tool output has been made more comprehensible and precise.  A number of defects in the CIVL code base were discovered and corrected.  A new "partial order reduction" scheme has been implemented to improve performance (speed) of the model checking engine.  Many internal improvements were carried out, such as consolidating four separate open-source projects into one, and updating the code base to use an up-to-date version of Java. The CIVL Model Checker is now being applied to a number of scientific computing applications, including those that perform sparse linear algebra operations.  CIVL has also performed well in the international verification competition VerifyThis, winning second place in 2022.       Last Modified: 07/25/2023       Submitted by: Stephen F Siegel]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
