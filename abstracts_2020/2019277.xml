<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle><![CDATA[FMitF: Track II: eMOP: A Tool for Evolution-Aware Runtime Verification]]></AwardTitle>
<AGENCY>NSF</AGENCY>
<AwardEffectiveDate>10/01/2020</AwardEffectiveDate>
<AwardExpirationDate>09/30/2023</AwardExpirationDate>
<AwardTotalIntnAmount>100000.00</AwardTotalIntnAmount>
<AwardAmount>100000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
<PO_EMAI>abanerje@nsf.gov</PO_EMAI>
<PO_PHON>7032927885</PO_PHON>
</ProgramOfficer>
<AbstractNarration><![CDATA[Most software developers perform regression testing, re-running tests after every code change, to check that new bugs are not being introduced. Unfortunately, regression testing often misses bugs. This project is developing eMOP, a runtime-verification tool for discovering more bugs during regression testing. Runtime verification checks test runs against specifications that are encoded as logical formulas. Test runs that do not satisfy the specifications result in violations.&lt;br/&gt;&lt;br/&gt;This project has three infrastructure thrusts. First, a core eMOP component is created that incrementally applies runtime verification, for example, by rechecking only specifications that can be violated in parts of code affected by the changes. Second, the core component is integrated with popular open-source regression testing infrastructure: build systems, continuous integration, and integrated development environments. Third, the core component is enhanced with features for prioritization and improved reporting that make it easier to triage, inspect, and debug violations. When complete, eMOP will offer the bug-finding benefits of runtime verification within regression testing infrastructure that developers already use.&lt;br/&gt;&lt;br/&gt;The project brings the results of decades of runtime verification research to a wider audience of software developers. eMOP enables developers to find more bugs earlier -- ideally as soon as the bugs are introduced. By using eMOP, students will also be introduced to lightweight formal methods within a software-engineering curriculum. Graduate and undergraduate students, including underrepresented minorities, will be involved, and they will gain exposure to software engineering and lightweight formal methods.&lt;br/&gt;&lt;br/&gt;The eMOP code will be released publicly on GitHub (https://github.com/SoftEngResearch/emop) under the Apache License 2.0. The code will be maintained for a minimum of three years. A supplementary web page linked from the GitHub repository will contain tutorials and experimental data.&lt;br/&gt;&lt;br/&gt;This award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.]]></AbstractNarration>
<MinAmdLetterDate>06/17/2020</MinAmdLetterDate>
<MaxAmdLetterDate>06/17/2020</MaxAmdLetterDate>
<ARRAAmount/>
<TRAN_TYPE>Grant</TRAN_TYPE>
<CFDA_NUM>47.070</CFDA_NUM>
<NSF_PAR_USE_FLAG>1</NSF_PAR_USE_FLAG>
<FUND_AGCY_CODE>4900</FUND_AGCY_CODE>
<AWDG_AGCY_CODE>4900</AWDG_AGCY_CODE>
<AwardID>2019277</AwardID>
<Investigator>
<FirstName>Owolabi</FirstName>
<LastName>Legunsen</LastName>
<PI_MID_INIT/>
<PI_SUFX_NAME/>
<PI_FULL_NAME>Owolabi Legunsen</PI_FULL_NAME>
<EmailAddress><![CDATA[ool6@cornell.edu]]></EmailAddress>
<NSF_ID>000819619</NSF_ID>
<StartDate>06/17/2020</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>Cornell University</Name>
<CityName>ITHACA</CityName>
<ZipCode>148502820</ZipCode>
<PhoneNumber>6072555014</PhoneNumber>
<StreetAddress>341 PINE TREE RD</StreetAddress>
<StreetAddress2/>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<StateCode>NY</StateCode>
<CONGRESSDISTRICT>19</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_ORG>NY19</CONGRESS_DISTRICT_ORG>
<ORG_UEI_NUM>G56PUALJ3KT5</ORG_UEI_NUM>
<ORG_LGL_BUS_NAME>CORNELL UNIVERSITY</ORG_LGL_BUS_NAME>
<ORG_PRNT_UEI_NUM/>
</Institution>
<Performance_Institution>
<Name><![CDATA[Cornell University]]></Name>
<CityName>Ithaca</CityName>
<StateCode>NY</StateCode>
<ZipCode>148537501</ZipCode>
<StreetAddress><![CDATA[107 Hoy Road]]></StreetAddress>
<CountryCode>US</CountryCode>
<CountryName>United States</CountryName>
<StateName>New York</StateName>
<CountryFlag>1</CountryFlag>
<CONGRESSDISTRICT>19</CONGRESSDISTRICT>
<CONGRESS_DISTRICT_PERF>NY19</CONGRESS_DISTRICT_PERF>
</Performance_Institution>
<ProgramElement>
<Code>094Y</Code>
<Text>FMitF: Formal Methods in the F</Text>
</ProgramElement>
<ProgramReference>
<Code>071Z</Code>
<Text>FMitF-Formal Methods in the Field</Text>
</ProgramReference>
<ProgramReference>
<Code>8206</Code>
<Text>Formal Methods and Verification</Text>
</ProgramReference>
<Appropriation>
<Code>0120</Code>
<Name>NSF RESEARCH &amp; RELATED ACTIVIT</Name>
<APP_SYMB_ID>040100</APP_SYMB_ID>
</Appropriation>
<Fund>
<Code>01002021DB</Code>
<Name><![CDATA[NSF RESEARCH & RELATED ACTIVIT]]></Name>
<FUND_SYMB_ID>040100</FUND_SYMB_ID>
</Fund>
<FUND_OBLG>2020~100000</FUND_OBLG>
<POR>
<DRECONTENT><![CDATA[<div class="porColContainerWBG"> <div class="porContentCol"><p>Runtime verification -- monitoring program executions against formal specifications -- can be used to improve the fault-detection capability of software testing. To do so, developers need runtime verification tools that they can integrate into their testing processes without imposing high overheads. Such overheads arise as human time to inspect specification violations, or extra machine time to perform runtime verification of tests. We previously proposed three evolution-aware techniques that reduce these overheads by focusing runtime verification and its users on parts of code that are affected by code changes. But, there was no usable evolution-aware runtime verification tool that developers could adopt, especially during continuous integration, in which frequent code changes are made daily.<br /><br />This project developed eMOP, a low-overhead evolution-aware runtime verification tool that can be integrated into modern software testing environments. eMOP currently supports projects that use the very popular Maven build system. eMOP embodies three evolution-aware runtime verification techniques: (1) all 12 variants of Regression Property Selection (which re-checks only a subset of specifications after code changes); (2) Regression Property Prioritization (which provides faster feedback to developers on higher priority specifications, and monitors the remaining in the background); and (3) Violation Message Suppression (which only shows developers the violations that are due to the most recent changes). eMOP lets users easily combine these three techniques. eMOP is up to 8.4x faster and shows up to 31.3x fewer violations, compared to running RV from scratch after each code change. eMOP also did not miss new violations in our evaluation, and it is open-sourced at https://github.com/SoftEngResearch/emop.<br /><br />This grant also partially supported the publication of eight papers (including one paper that won an ACM SIGSOFT Distinguished Paper Award), and the training of two PhD students, one Master's student, and one undergraduate student. This eMOP project was the undergraduate student's first exposure to research; he recently started as a PhD student at Cornell University. Also, two graduate students involved in eMOP self-identify as women. The impacts also include new research that we are now building on top of eMOP. This research brings runtime verification, which was previously only usable by experts, closer to being used by all developers for finding more bugs during software development.</p><br> <p>            Last Modified: 10/06/2023<br>      Modified by: Owolabi&nbsp;Legunsen</p> </div> <div class="porSideCol"></div> </div>]]></DRECONTENT>
<POR_COPY_TXT><![CDATA[ Runtime verification -- monitoring program executions against formal specifications -- can be used to improve the fault-detection capability of software testing. To do so, developers need runtime verification tools that they can integrate into their testing processes without imposing high overheads. Such overheads arise as human time to inspect specification violations, or extra machine time to perform runtime verification of tests. We previously proposed three evolution-aware techniques that reduce these overheads by focusing runtime verification and its users on parts of code that are affected by code changes. But, there was no usable evolution-aware runtime verification tool that developers could adopt, especially during continuous integration, in which frequent code changes are made daily.  This project developed eMOP, a low-overhead evolution-aware runtime verification tool that can be integrated into modern software testing environments. eMOP currently supports projects that use the very popular Maven build system. eMOP embodies three evolution-aware runtime verification techniques: (1) all 12 variants of Regression Property Selection (which re-checks only a subset of specifications after code changes); (2) Regression Property Prioritization (which provides faster feedback to developers on higher priority specifications, and monitors the remaining in the background); and (3) Violation Message Suppression (which only shows developers the violations that are due to the most recent changes). eMOP lets users easily combine these three techniques. eMOP is up to 8.4x faster and shows up to 31.3x fewer violations, compared to running RV from scratch after each code change. eMOP also did not miss new violations in our evaluation, and it is open-sourced at https://github.com/SoftEngResearch/emop.  This grant also partially supported the publication of eight papers (including one paper that won an ACM SIGSOFT Distinguished Paper Award), and the training of two PhD students, one Master's student, and one undergraduate student. This eMOP project was the undergraduate student's first exposure to research; he recently started as a PhD student at Cornell University. Also, two graduate students involved in eMOP self-identify as women. The impacts also include new research that we are now building on top of eMOP. This research brings runtime verification, which was previously only usable by experts, closer to being used by all developers for finding more bugs during software development.       Last Modified: 10/06/2023       Submitted by: Owolabi Legunsen]]></POR_COPY_TXT>
</POR>
</Award>
</rootTag>
